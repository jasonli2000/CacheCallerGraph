#!/usr/bin/env python

# A python script to parse log file to generate routine/package information
# and print out the routine information based on the input.
# To run the script, please do
# python RoutineFinder.py -l <logFileDir> -r <VistA-Repository-Dir>
# enter quit to exit 
#---------------------------------------------------------------------------
# Copyright 2011 The Open Source Electronic Health Record Agent
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import argparse
import os
import CallerGraphParser

from datetime import datetime, date, time
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='VistA Routine information Finder')
    parser.add_argument('-l', required=True, dest='logFileDir',
                        help='Input XINDEX log files directory generated by CTest, nomally under'
                             'CMAKE_BUILD_DIR/Docs/CallerGraph/')
    parser.add_argument('-r', required=True, dest='repositDir',
                        help='VistA Git Repository Directory')
    
    result = vars(parser.parse_args());
    logParser = CallerGraphParser.CallerGraphLogFileParser()
    print "Starting parsing package/routine...."
    print "Time is: %s" % datetime.now()
    routineFilePattern = "*/Routines/*.m"
    routineFileDir = os.path.join(result['repositDir'], "Packages")
    logParser.findPackagesAndRoutinesBySource(routineFileDir, routineFilePattern)
    print "End parsing package/routine...."
    print "Time is: %s" % datetime.now()
    print "Starting parsing caller graph log file...."    
    
    callLogPattern="*.log"
    logParser.parseAllCallerGraphLog(result['logFileDir'], callLogPattern)
    orphanRoutines=sorted(logParser.getOrphanRoutines())
    print "End of parsing log file......"
    print "Time is: %s" % datetime.now()
    # read the user input from the terminal
    isExit=False
    print "Please enter quit to exit"
    print "please enter orphan_routine to print orphan routines"
    while not isExit:
        var = raw_input("Please enter the routine Name:")
        if (var == 'quit'):
            isExit=True
            continue
        if (var=='orphan_routine'):
            for routine in orphanRoutines:
                print routine
        else:
            logParser.printRoutine(var)